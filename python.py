import streamlit as st
import pandas as pd
import numpy as np
import json
import time
import requests # Th∆∞ vi·ªán c·∫ßn thi·∫øt ƒë·ªÉ g·ªçi Gemini API

# --- C·∫•u h√¨nh API v√† Th√¥ng s·ªë ---
MODEL_NAME = "gemini-2.5-flash-preview-05-20"
API_URL_BASE = "https://generativelanguage.googleapis.com/v1beta/models/"

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh Gi√° Ph∆∞∆°ng √Ån Kinh Doanh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh Gi√° Ph∆∞∆°ng √Ån Kinh Doanh üìä")
st.markdown("Chuy√™n gia t√†i ch√≠nh AI: Tr√≠ch xu·∫•t, t√≠nh to√°n v√† ph√¢n t√≠ch d·ª± √°n ƒë·∫ßu t∆∞.")

# Kh·ªüi t·∫°o state (Quan tr·ªçng cho c√°c thao t√°c l·∫∑p l·∫°i)
if 'extracted_data' not in st.session_state:
    st.session_state.extracted_data = None
if 'cash_flow_df' not in st.session_state:
    st.session_state.cash_flow_df = None
if 'metrics' not in st.session_state:
    st.session_state.metrics = None
if 'ai_analysis' not in st.session_state:
    st.session_state.ai_analysis = None

# --- H√†m g·ªçi API Gemini v·ªõi Backoff ---
@st.cache_data(show_spinner=False)
def call_gemini_api(payload, api_key):
    """Th·ª±c hi·ªán g·ªçi API Gemini v·ªõi c∆° ch·∫ø Exponential Backoff."""
    if not api_key:
        raise ValueError("Kh√≥a API kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y.")

    url = f"{API_URL_BASE}{payload.get('model', MODEL_NAME)}:generateContent?key={api_key}"
    
    max_retries = 5
    for attempt in range(max_retries):
        try:
            # G·ª≠i y√™u c·∫ßu
            response = requests.post(
                url, 
                headers={'Content-Type': 'application/json'}, 
                data=json.dumps(payload)
            )
            response.raise_for_status() # N√©m l·ªói cho m√£ tr·∫°ng th√°i HTTP kh√¥ng th√†nh c√¥ng
            
            result = response.json()
            
            # Ki·ªÉm tra l·ªói t·ª´ API
            if 'error' in result:
                st.error(f"L·ªói API t·ª´ Gemini: {result['error']['message']}")
                return None

            # Tr√≠ch xu·∫•t vƒÉn b·∫£n/JSON
            candidate = result.get('candidates', [{}])[0]
            if candidate and candidate.get('content') and candidate['content'].get('parts'):
                return candidate['content']['parts'][0].get('text')

            return None
            
        except requests.exceptions.HTTPError as e:
            if response.status_code in [429, 500, 503] and attempt < max_retries - 1:
                sleep_time = 2 ** attempt # Exponential backoff
                time.sleep(sleep_time)
                continue
            st.error(f"L·ªói HTTP: {e}. M√£ tr·∫°ng th√°i: {response.status_code}")
            return None
        except Exception as e:
            st.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API: {e}")
            return None
    st.error("Th·ª≠ l·∫°i th·∫•t b·∫°i sau nhi·ªÅu l·∫ßn.")
    return None

# --- Ch·ª©c nƒÉng 1: Tr√≠ch xu·∫•t D·ªØ li·ªáu b·∫±ng AI (C√≥ c·∫•u tr√∫c) ---
def extract_parameters(document_text, api_key):
    """
    S·ª≠ d·ª•ng Gemini API v·ªõi JSON Schema ƒë·ªÉ tr√≠ch xu·∫•t 6 th√¥ng s·ªë t√†i ch√≠nh.
    """
    st.session_state.ai_analysis = None # Reset analysis
    st.session_state.cash_flow_df = None
    st.session_state.metrics = None
    
    # ƒê·ªãnh nghƒ©a Schema cho c√°c th√¥ng s·ªë c·∫ßn tr√≠ch xu·∫•t
    extraction_schema = {
        "type": "OBJECT",
        "properties": {
            "InvestmentCapital": {"type": "NUMBER", "description": "T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu ($t_0$), ƒë∆°n v·ªã VND."},
            "ProjectLifespan": {"type": "INTEGER", "description": "D√≤ng ƒë·ªùi d·ª± √°n, s·ªë nƒÉm ho·∫°t ƒë·ªông (vd: 5, 10)."},
            "AnnualRevenue": {"type": "NUMBER", "description": "Doanh thu h√†ng nƒÉm, ƒë∆°n v·ªã VND. (Gi·∫£ ƒë·ªãnh ·ªïn ƒë·ªãnh)."},
            "AnnualCost": {"type": "NUMBER", "description": "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (ch∆∞a bao g·ªìm Kh·∫•u hao, Thu·∫ø), ƒë∆°n v·ªã VND. (Gi·∫£ ƒë·ªãnh ·ªïn ƒë·ªãnh)."},
            "WACC": {"type": "NUMBER", "description": "T·ª∑ l·ªá chi·∫øt kh·∫•u (WACC) d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.12 cho 12%)."},
            "TaxRate": {"type": "NUMBER", "description": "Thu·∫ø su·∫•t thu·∫ø thu nh·∫≠p doanh nghi·ªáp d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.2 cho 20%)."}
        },
        "required": ["InvestmentCapital", "ProjectLifespan", "AnnualRevenue", "AnnualCost", "WACC", "TaxRate"]
    }

    # Prompt h∆∞·ªõng d·∫´n AI tr√≠ch xu·∫•t
    system_prompt = (
        "B·∫°n l√† m·ªôt chuy√™n gia tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc n·ªôi dung d·ª± √°n ƒë∆∞·ª£c cung c·∫•p v√† tr√≠ch xu·∫•t "
        "ch√≠nh x√°c 6 th√¥ng s·ªë sau v√†o ƒë·ªãnh d·∫°ng JSON b·∫Øt bu·ªôc. B·ªè qua t·∫•t c·∫£ vƒÉn b·∫£n kh√°c. "
        "ƒê·∫£m b·∫£o c√°c gi√° tr·ªã l√† s·ªë v√† t·ª∑ l·ªá l√† s·ªë th·∫≠p ph√¢n. Gi·∫£ ƒë·ªãnh d√≤ng ƒë·ªùi d·ª± √°n kh√¥ng qu√° 10 nƒÉm."
    )
    
    user_query = f"Tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh c·∫ßn thi·∫øt t·ª´ n·ªôi dung d·ª± √°n sau:\n\n---\n{document_text}\n---"

    payload = {
        "model": MODEL_NAME,
        "contents": [{"parts": [{"text": user_query}]}],
        "systemInstruction": {"parts": [{"text": system_prompt}]},
        "generationConfig": {
            "responseMimeType": "application/json",
            "responseSchema": extraction_schema
        }
    }

    with st.spinner("ƒêang s·ª≠ d·ª•ng AI ƒë·ªÉ l·ªçc th√¥ng tin d·ª± √°n..."):
        json_string = call_gemini_api(payload, api_key)
        
    if json_string:
        try:
            return json.loads(json_string)
        except json.JSONDecodeError as e:
            st.error(f"L·ªói: AI tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi dung file. Chi ti·∫øt l·ªói: {e}")
            st.code(json_string) # Hi·ªÉn th·ªã JSON l·ªói ƒë·ªÉ debug
            return None
    return None

# --- Ch·ª©c nƒÉng 2 & 3: T√≠nh to√°n D√≤ng ti·ªÅn & Ch·ªâ s·ªë ---

# Kh·∫•u hao tuy·∫øn t√≠nh (Gi·∫£ ƒë·ªãnh gi√° tr·ªã thanh l√Ω = 0)
def calculate_depreciation(investment, lifespan):
    """T√≠nh Kh·∫•u hao theo ph∆∞∆°ng ph√°p tuy·∫øn t√≠nh."""
    if lifespan > 0:
        return investment / lifespan
    return 0

@st.cache_data
def calculate_financials(data):
    """X√¢y d·ª±ng B·∫£ng d√≤ng ti·ªÅn v√† t√≠nh to√°n c√°c ch·ªâ s·ªë ƒë√°nh gi√°."""
    Inv = data['InvestmentCapital']
    L = data['ProjectLifespan']
    Rev = data['AnnualRevenue']
    Cost = data['AnnualCost']
    WACC = data['WACC']
    Tax = data['TaxRate']

    # 1. B·∫£ng D√≤ng ti·ªÅn (Cash Flow Table)
    years = list(range(1, L + 1))
    
    # Kh·∫•u hao
    Depr = calculate_depreciation(Inv, L)
    
    # T√≠nh to√°n d√≤ng ti·ªÅn t·ª´ng nƒÉm
    CF_data = []
    
    # Giai ƒëo·∫°n t=0 (ƒê·∫ßu t∆∞)
    CF_data.append({
        'NƒÉm': 0, 
        'V·ªën ƒë·∫ßu t∆∞': -Inv, 
        'Doanh thu': 0, 
        'Chi ph√≠ (Tr·ª´ Kh·∫•u hao)': 0,
        'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø': 0, 
        'Thu·∫ø ph·∫£i n·ªôp': 0, 
        'D√≤ng ti·ªÅn thu·∫ßn (CF)': -Inv, 
        'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)': -Inv,
        'D√≤ng ti·ªÅn l≈©y k·∫ø (CCF)': -Inv,
        'D√≤ng ti·ªÅn chi·∫øt kh·∫•u l≈©y k·∫ø (DCCF)': -Inv,
        'PV c·ªßa CF (NPV)': 0
    })

    # Giai ƒëo·∫°n t=1 ƒë·∫øn t=L
    for t in years:
        # L·ª£i nhu·∫≠n tr∆∞·ªõc Thu·∫ø v√† L√£i (EBIT)
        EBIT = Rev - Cost - Depr
        
        # Thu·∫ø
        Tax_paid = EBIT * Tax if EBIT > 0 else 0
        
        # L·ª£i nhu·∫≠n sau thu·∫ø (Net Income)
        Net_Income = EBIT - Tax_paid
        
        # D√≤ng ti·ªÅn thu·∫ßn (CF = Net Income + Kh·∫•u hao)
        CF = Net_Income + Depr
        
        # D√≤ng ti·ªÅn chi·∫øt kh·∫•u (Discounted Cash Flow - DCF)
        DCF = CF / (1 + WACC) ** t
        
        CF_data.append({
            'NƒÉm': t, 
            'V·ªën ƒë·∫ßu t∆∞': 0, 
            'Doanh thu': Rev, 
            'Chi ph√≠ (Tr·ª´ Kh·∫•u hao)': Cost + Depr,
            'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø': EBIT, 
            'Thu·∫ø ph·∫£i n·ªôp': Tax_paid, 
            'D√≤ng ti·ªÅn thu·∫ßn (CF)': CF, 
            'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)': DCF,
            'D√≤ng ti·ªÅn l≈©y k·∫ø (CCF)': 0, # S·∫Ω t√≠nh sau
            'D√≤ng ti·ªÅn chi·∫øt kh·∫•u l≈©y k·∫ø (DCCF)': 0, # S·∫Ω t√≠nh sau
            'PV c·ªßa CF (NPV)': 0
        })

    df = pd.DataFrame(CF_data)
    
    # T√≠nh to√°n L≈©y k·∫ø (CCF v√† DCCF)
    df['D√≤ng ti·ªÅn l≈©y k·∫ø (CCF)'] = df['D√≤ng ti·ªÅn thu·∫ßn (CF)'].cumsum()
    df['D√≤ng ti·ªÅn chi·∫øt kh·∫•u l≈©y k·∫ø (DCCF)'] = df['D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)'].cumsum()

    # 2. T√≠nh to√°n Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£
    
    # NPV (Net Present Value - Gi√° tr·ªã hi·ªán t·∫°i thu·∫ßn)
    # D√≤ng ti·ªÅn bao g·ªìm Inv ban ƒë·∫ßu v√† CF thu·∫ßn c√°c nƒÉm sau
    npv_value = df['D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)'].sum()
    
    # IRR (Internal Rate of Return - T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)
    try:
        cf_for_irr = df['D√≤ng ti·ªÅn thu·∫ßn (CF)'].tolist()
        irr_value = np.irr(cf_for_irr)
    except Exception:
        irr_value = np.nan # Kh√¥ng th·ªÉ t√≠nh n·∫øu d√≤ng ti·ªÅn kh√¥ng ƒë·ªïi d·∫•u

    # PP (Payback Period - Th·ªùi gian ho√†n v·ªën)
    # T√¨m nƒÉm m√† CCF chuy·ªÉn t·ª´ √¢m sang d∆∞∆°ng
    ccf = df['D√≤ng ti·ªÅn l≈©y k·∫ø (CCF)'].values
    payback_year = np.argmax(ccf >= 0)
    
    if payback_year > 0:
        prev_year_cf = df.loc[payback_year - 1, 'D√≤ng ti·ªÅn l≈©y k·∫ø (CCF)']
        current_year_cf = df.loc[payback_year, 'D√≤ng ti·ªÅn thu·∫ßn (CF)']
        pp_value = (payback_year - 1) + (abs(prev_year_cf) / current_year_cf)
    else:
        pp_value = L + 1 # N·∫øu kh√¥ng ho√†n v·ªën trong d√≤ng ƒë·ªùi d·ª± √°n
    
    # DPP (Discounted Payback Period - Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    # T√¨m nƒÉm m√† DCCF chuy·ªÉn t·ª´ √¢m sang d∆∞∆°ng
    dccf = df['D√≤ng ti·ªÅn chi·∫øt kh·∫•u l≈©y k·∫ø (DCCF)'].values
    discounted_payback_year = np.argmax(dccf >= 0)
    
    if discounted_payback_year > 0:
        prev_year_dcf = df.loc[discounted_payback_year - 1, 'D√≤ng ti·ªÅn chi·∫øt kh·∫•u l≈©y k·∫ø (DCCF)']
        current_year_dcf = df.loc[discounted_payback_year, 'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)']
        dpp_value = (discounted_payback_year - 1) + (abs(prev_year_dcf) / current_year_dcf)
    else:
        dpp_value = L + 1

    metrics = {
        'NPV': npv_value,
        'IRR': irr_value,
        'PP': pp_value,
        'DPP': dpp_value,
        'WACC': WACC,
        'ProjectLifespan': L
    }
    
    return df, metrics

# --- Ch·ª©c nƒÉng 4: Ph√¢n t√≠ch AI ---
def analyze_metrics(metrics, cash_flow_df, api_key):
    """Y√™u c·∫ßu Gemini AI ph√¢n t√≠ch c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n."""
    
    metrics_str = "\n".join([f"- {k}: {v:,.2f}" for k, v in metrics.items() if k not in ['ProjectLifespan', 'WACC']])
    wacc_str = f"WACC (T·ª∑ l·ªá chi·∫øt kh·∫•u) ƒë∆∞·ª£c s·ª≠ d·ª•ng l√†: {metrics['WACC'] * 100:.2f}%."
    lifespan_str = f"D√≤ng ƒë·ªùi d·ª± √°n l√†: {metrics['ProjectLifespan']} nƒÉm."
    
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh ƒë·∫ßu t∆∞. H√£y ph√¢n t√≠ch kh√°ch quan v√† chuy√™n s√¢u v·ªÅ hi·ªáu qu·∫£ c·ªßa d·ª± √°n d·ª±a tr√™n c√°c ch·ªâ s·ªë sau. 
    ƒê∆∞a ra nh·∫≠n ƒë·ªãnh r√µ r√†ng v·ªÅ t√≠nh kh·∫£ thi (Kh·∫£ thi/Kh√¥ng kh·∫£ thi) v√† khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞:

    1. **C√°c ch·ªâ s·ªë ƒë√°nh gi√° d·ª± √°n:**
    {metrics_str}
    {wacc_str}
    {lifespan_str}

    2. **Y√™u c·∫ßu ph√¢n t√≠ch:**
    - **NPV:** ƒê√°nh gi√° √Ω nghƒ©a c·ªßa NPV (√¢m hay d∆∞∆°ng) so v·ªõi m·ª©c ƒë·∫ßu t∆∞.
    - **IRR:** So s√°nh IRR v·ªõi WACC (chi ph√≠ s·ª≠ d·ª•ng v·ªën). D·ª± √°n c√≥ t·∫°o ra gi√° tr·ªã kh√¥ng?
    - **PP & DPP:** Nh·∫≠n x√©t v·ªÅ t·ªëc ƒë·ªô ho√†n v·ªën, ƒë·∫∑c bi·ªát so s√°nh PP v√† DPP ƒë·ªÉ th·∫•y r√µ t√°c ƒë·ªông c·ªßa y·∫øu t·ªë th·ªùi gian v√† WACC.
    - **K·∫øt lu·∫≠n chung:** D·ª± √°n n√†y c√≥ n√™n ƒë∆∞·ª£c ch·∫•p thu·∫≠n/ƒë·∫ßu t∆∞ kh√¥ng? Gi·∫£i th√≠ch ng·∫Øn g·ªçn l√Ω do.

    B·∫Øt ƒë·∫ßu b√†i ph√¢n t√≠ch c·ªßa b·∫°n v·ªõi ti√™u ƒë·ªÅ: "Ph√¢n T√≠ch Hi·ªáu Qu·∫£ ƒê·∫ßu T∆∞ D·ª± √Ån" v√† k·∫øt th√∫c b·∫±ng m·ªôt k·∫øt lu·∫≠n r√µ r√†ng.
    """
    
    payload = {
        "model": MODEL_NAME,
        "contents": [{"parts": [{"text": prompt}]}],
        "systemInstruction": {"parts": [{"text": "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh ƒë·∫ßu t∆∞."}]},
    }
    
    with st.spinner("ƒêang g·ª≠i ch·ªâ s·ªë v√† ch·ªù Gemini AI ph√¢n t√≠ch..."):
        return call_gemini_api(payload, api_key)


# --- Khu v·ª±c X·ª≠ l√Ω File v√† T∆∞∆°ng t√°c Ng∆∞·ªùi d√πng ---

# Ki·ªÉm tra API Key
api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
    st.warning("‚ö†Ô∏è L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY' trong Streamlit Secrets. Vui l√≤ng c·∫•u h√¨nh Kh√≥a API ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")

col_upload, col_input = st.columns([2, 3])

# 1. T·∫£i File v√† Text Input
with col_upload:
    uploaded_file = st.file_uploader(
        "1. T·∫£i file Word/Text ch·ª©a ph∆∞∆°ng √°n kinh doanh:",
        type=['docx', 'txt']
    )
    
    # X·ª≠ l√Ω ƒë·ªçc file th√†nh vƒÉn b·∫£n
    document_text = ""
    if uploaded_file is not None:
        try:
            # ƒê·ªëi v·ªõi file docx, ƒë·ªçc th√¥ c√≥ th·ªÉ kh√¥ng ho√†n h·∫£o, nh∆∞ng Gemini c√≥ th·ªÉ x·ª≠ l√Ω t·ªët h∆°n file txt
            document_text = uploaded_file.getvalue().decode("utf-8", errors='ignore')
            st.success("ƒê√£ ƒë·ªçc n·ªôi dung file.")
        except UnicodeDecodeError:
            st.warning("Kh√¥ng th·ªÉ gi·∫£i m√£ file Word ph·ª©c t·∫°p. Vui l√≤ng d√°n n·ªôi dung v√†o √¥ b√™n c·∫°nh.")
            document_text = uploaded_file.getvalue().decode('latin-1', errors='ignore')
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file: {e}")
            document_text = ""

with col_input:
    # Cho ph√©p ng∆∞·ªùi d√πng d√°n/ch·ªânh s·ª≠a n·ªôi dung
    text_input = st.text_area(
        "Ho·∫∑c d√°n/ch·ªânh s·ª≠a n·ªôi dung t√†i li·ªáu (khuy·∫øn ngh·ªã n·∫øu file Word ph·ª©c t·∫°p):",
        value=document_text,
        height=300
    )

if st.button("2. ü§ñ L·ªçc D·ªØ li·ªáu T√†i ch√≠nh b·∫±ng AI"):
    if not api_key:
        st.error("Vui l√≤ng c·∫•u h√¨nh Kh√≥a API 'GEMINI_API_KEY' tr∆∞·ªõc khi s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")
    elif not text_input.strip():
        st.error("Vui l√≤ng t·∫£i l√™n file ho·∫∑c nh·∫≠p n·ªôi dung d·ª± √°n v√†o h·ªôp vƒÉn b·∫£n.")
    else:
        extracted = extract_parameters(text_input, api_key)
        if extracted:
            st.session_state.extracted_data = extracted
            try:
                # T√≠nh to√°n D√≤ng ti·ªÅn v√† Ch·ªâ s·ªë
                df, metrics = calculate_financials(extracted)
                st.session_state.cash_flow_df = df
                st.session_state.metrics = metrics
                st.success("Tr√≠ch xu·∫•t v√† T√≠nh to√°n th√†nh c√¥ng!")
            except Exception as e:
                st.session_state.extracted_data = None
                st.error(f"L·ªói khi t√≠nh to√°n t√†i ch√≠nh: Vui l√≤ng ki·ªÉm tra c√°c tham s·ªë ƒë√£ tr√≠ch xu·∫•t. Chi ti·∫øt l·ªói: {e}")
                st.warning("ƒê·∫£m b·∫£o c√°c gi√° tr·ªã Doanh thu, Chi ph√≠, V·ªën ƒë·∫ßu t∆∞, v√† D√≤ng ƒë·ªùi d·ª± √°n l√† h·ª£p l√Ω.")


# --- Hi·ªÉn th·ªã K·∫øt qu·∫£ (Ch·ª©c nƒÉng 2 & 3) ---

if st.session_state.extracted_data:
    data = st.session_state.extracted_data
    df = st.session_state.cash_flow_df
    metrics = st.session_state.metrics

    st.markdown("---")
    st.subheader("3. C√°c Th√¥ng s·ªë D·ª± √°n ƒë√£ Tr√≠ch xu·∫•t")
    
    col_p1, col_p2, col_p3 = st.columns(3)
    
    col_p1.metric("üí∞ V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu ($t=0$)", f"{data['InvestmentCapital']:,.0f} VND")
    col_p2.metric("üóìÔ∏è D√≤ng ƒë·ªùi d·ª± √°n", f"{data['ProjectLifespan']} nƒÉm")
    col_p3.metric("üìà WACC (T·ª∑ l·ªá chi·∫øt kh·∫•u)", f"{data['WACC'] * 100:.2f}%")
    
    col_p1.metric("üíµ Doanh thu h√†ng nƒÉm", f"{data['AnnualRevenue']:,.0f} VND")
    col_p2.metric("üí∏ Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm", f"{data['AnnualCost']:,.0f} VND")
    col_p3.metric("üßæ Thu·∫ø su·∫•t (Tax)", f"{data['TaxRate'] * 100:.0f}%")

    st.markdown("---")
    st.subheader("4. B·∫£ng D√≤ng ti·ªÅn D·ª± √°n (Cash Flow Table)")

    if df is not None:
        # ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã
        format_dict = {
            'V·ªën ƒë·∫ßu t∆∞': '{:,.0f}',
            'Doanh thu': '{:,.0f}',
            'Chi ph√≠ (Tr·ª´ Kh·∫•u hao)': '{:,.0f}',
            'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø': '{:,.0f}',
            'Thu·∫ø ph·∫£i n·ªôp': '{:,.0f}',
            'D√≤ng ti·ªÅn thu·∫ßn (CF)': '{:,.0f}',
            'D√≤ng ti·ªÅn chi·∫øt kh·∫•u (DCF)': '{:,.0f}',
            'D√≤ng ti·ªÅn l≈©y k·∫ø (CCF)': '{:,.0f}',
            'D√≤ng ti·ªÅn chi·∫øt kh·∫•u l≈©y k·∫ø (DCCF)': '{:,.0f}',
            'PV c·ªßa CF (NPV)': '{:,.0f}' # Ch·ªâ d√πng c·ªôt n√†y ƒë·ªÉ t√≠nh l≈©y k·∫ø b√™n trong h√†m
        }

        # √Åp d·ª•ng m√†u cho c√°c c·ªôt l≈©y k·∫ø (quan tr·ªçng ƒë·ªÉ x√°c ƒë·ªãnh ho√†n v·ªën)
        st.dataframe(
            df.style.format(format_dict).apply(
                lambda x: ['background-color: lightgreen' if v > 0 and x.name in ['D√≤ng ti·ªÅn l≈©y k·∫ø (CCF)', 'D√≤ng ti·ªÅn chi·∫øt kh·∫•u l≈©y k·∫ø (DCCF)'] else '' for v in x],
                axis=1
            ),
            use_container_width=True,
            hide_index=True
        )

    st.subheader("5. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£")
    
    col_m1, col_m2, col_m3, col_m4 = st.columns(4)
    
    if metrics:
        # NPV
        status_npv = "D·ª± √°n Kh·∫£ thi" if metrics['NPV'] >= 0 else "D·ª± √°n Kh√¥ng kh·∫£ thi"
        col_m1.metric("üíµ NPV (Gi√° tr·ªã hi·ªán t·∫°i thu·∫ßn)", f"{metrics['NPV']:,.0f} VND", delta=status_npv)

        # IRR
        status_irr = "IRR > WACC" if metrics['IRR'] >= metrics['WACC'] else "IRR < WACC"
        col_m2.metric("üìà IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)", f"{metrics['IRR'] * 100:.2f} %", delta=status_irr)

        # PP
        pp_delta = f"{metrics['PP'] - metrics['ProjectLifespan']:.2f} nƒÉm" if metrics['PP'] > metrics['ProjectLifespan'] else ""
        col_m3.metric("‚è≥ PP (Th·ªùi gian ho√†n v·ªën)", f"{metrics['PP']:.2f} nƒÉm", delta=pp_delta)

        # DPP
        dpp_delta = f"{metrics['DPP'] - metrics['ProjectLifespan']:.2f} nƒÉm" if metrics['DPP'] > metrics['ProjectLifespan'] else ""
        col_m4.metric("üìâ DPP (Ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)", f"{metrics['DPP']:.2f} nƒÉm", delta=dpp_delta)


    # --- Ch·ª©c nƒÉng 4: Nh·∫≠n x√©t AI ---
    st.markdown("---")
    st.subheader("6. üß† Ph√¢n t√≠ch Chuy√™n s√¢u (AI)")
    
    if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n", key="analyze_button"):
        if not api_key:
            st.error("Vui l√≤ng c·∫•u h√¨nh Kh√≥a API ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng ph√¢n t√≠ch.")
        elif metrics:
            st.session_state.ai_analysis = analyze_metrics(metrics, df.to_markdown(), api_key)
            
    if st.session_state.ai_analysis:
        st.info(st.session_state.ai_analysis)
